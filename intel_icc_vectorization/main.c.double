#include <stdio.h>
#include <stdint.h>
/*
 * AT&T UNIX assembler style 
 * 1. Operand order: source destination
 * 2. Operand size in opcode: b (byte), w(word), l(long, 32bit)
 * 3. Prefix % for registers
 * 4. Imediate constants by $
 * asm(""
 * 	: output operands
 * 	: input operands
 *  : list of clobbered registers
 * )
 */
 
 
 /* Задание:
  * 
  * 1. Написать программу переумножения двух матриц, при этом размерность матрицы  M*M подбирается т.о,
  * чтобы время переумножения было порядка 3..4с. Элементами матрицы является матрица K*K.
  * 
  * 2. Собрать проект с использованием icc с опциями -Qvec -QxSSE2 -Qvec-report3
  */
  
  /* Векторицзация
   * 1. MMX 64bit
   * 2. SSE 128bit
   * 3. AVX 256bit
   */

#define M 600
#define K 9
#define INTERNAL_MATRIX_VALUE(internal_matrix, row, column) *(internal_matrix_t+row*K+column)


/***********************************************************************/
typedef float matrix_value_t;
typedef matrix_value_t* internal_matrix_t;
typedef internal_matrix_t** external_matrix_t;

/***********************************************************************/	
	
int main(int argc, char** argv)
{		
		external_matrix_t a = (external_matrix_t) malloc(si;
		external_matrix_t b;
		external_matrix_t result;		
		mupltiple_external_matrix(a, b, result);
}


matrix_value_t*** matrix_init(int size)
{
}

int matrix_free(int size)
{
}

/***********************************************************************/

int multiple_external_matrix(const restrict external_matrix_t* a,
	const restrict external_matrix_t * b,
	const restrict external_matrix_t* r)
{
	
	for(uint32_t e_row=0; e_row<K; e_row++)
	{	
		for(uint32_t e_column=0; e_column<K; e_column++) 
		{	
			
			internal_matrix_t sum_matrix;
			for(register uint32_t j=0; j<K; j++)
			{
					//multiple two internal matrix to sum
					multiple_internal_matrix(a[e_row][j], b[j][i_column], sum_matrix);
			}
			
			r[e_row][e_column] = sum;
		}

	}
	
	return 0;
}

int sum_internal_matrix(const restrict internal_matrix_t* a, 
	const restrict internal_matrix_t* b,
	const restrict internal_matrix_t* r)
	{
		
		return 0;
	}

int multiple_internal_matrix(const restrict internal_matrix_t * a,
	const restrict internal_matrix_t * b,
	const internal_matrix_t *r)
{
	for(uint32_t i_row=0; i_row<K; i_row++)
	{	
		for(uint32_t i_column=0; i_column<K; i_column++) 
		{	
			for(register uint32_t j=0; j<K; j++)
			{
					sum += INTERNAL_MATRIX_VALUE(a, i_row, j) * GET_INTERNAL_MATRIX_VALUE(b, j, i_column);
			}
			
			INTERNAL_MATRIX_VALUE(r, i_row, i_column) = sum;
		}
	}
	
	return 0;
}
